name: Ensure pgcrypto Extension

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Environment (uat/prod) to configure'
    secrets:
      DATABASE_URL:
        required: true
        description: 'Database URL for the specified environment'

jobs:
  ensure-pgcrypto:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create safe pgcrypto SQL script
        run: |
          cat > safe_pgcrypto.sql << 'EOF'
          DO $$
          BEGIN
            -- Check if pgcrypto extension exists in any schema
            IF EXISTS (
              SELECT 1
              FROM pg_extension
              WHERE extname = 'pgcrypto'
            ) THEN
              RAISE NOTICE 'pgcrypto extension already exists, skipping creation';
            ELSE
              -- Try to create the extension with proper error handling
              BEGIN
                CREATE EXTENSION pgcrypto;
                RAISE NOTICE 'Successfully created pgcrypto extension';
              EXCEPTION 
                WHEN insufficient_privilege THEN
                  RAISE WARNING 'Insufficient privileges to create pgcrypto extension. This is expected for non-superusers.';
                WHEN object_not_in_prerequisite_state THEN  
                  RAISE WARNING 'pgcrypto extension is not in a prerequisite state for creation.';
                WHEN OTHERS THEN
                  RAISE WARNING 'Failed to create pgcrypto extension: %', SQLERRM;
              END;
            END IF;
          END
          $$;

          -- Check if pgcrypto functions are available regardless of extension status
          DO $$
          BEGIN
            PERFORM gen_random_uuid();
            RAISE NOTICE 'gen_random_uuid() function is available';
          EXCEPTION
            WHEN undefined_function THEN
              RAISE WARNING 'gen_random_uuid() function is not available. Some features may not work correctly.';
            WHEN OTHERS THEN
              RAISE WARNING 'Error checking gen_random_uuid(): %', SQLERRM;
          END
          $$;
          EOF

      - name: Safely ensure pgcrypto extension
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # Run the safe pgcrypto script, continue even if it "fails" with a warning
          set +e
          psql "$DATABASE_URL" -f safe_pgcrypto.sql
          pgcrypto_status=$?

          echo "pgcrypto setup completed with status $pgcrypto_status"

          if [ $pgcrypto_status -eq 0 ]; then
            echo "✓ pgcrypto extension check completed successfully"
          else
            echo "⚠️ pgcrypto extension check completed with warnings"
            echo "This is often normal when the database user doesn't have permission to create extensions."
            echo "Continuing workflow as the database may already have the extension or required functions."
          fi

          # Always exit successfully to prevent workflow failure
          exit 0
