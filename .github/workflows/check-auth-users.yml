name: Check Auth Users and Roles

on:
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: '0 9 * * 1' # Run every Monday at 9 AM UTC
  push:
    branches: [main]
    paths:
      - '.github/workflows/check-auth-users.yml'

jobs:
  check-auth-users:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create auth users check script
        run: |
          cat > check-auth-users.js << 'EOF'
          #!/usr/bin/env node

          import { createClient } from '@supabase/supabase-js';
          import { config } from 'dotenv';

          // Load environment variables
          config({ path: '.env.local' });

          const supabaseUrl = process.env.PROD_SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
          const supabaseServiceKey = process.env.PROD_SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;

          if (!supabaseUrl || !supabaseServiceKey) {
              console.error('‚ùå Missing required environment variables:');
              console.error('   For Production: PROD_SUPABASE_URL, PROD_SUPABASE_SERVICE_ROLE_KEY');
              console.error('   For Local/Dev: NEXT_PUBLIC_SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY');
              console.error('');
              console.error('Make sure these are set in your environment');
              process.exit(1);
          }

          const supabase = createClient(supabaseUrl, supabaseServiceKey);

          async function checkAuthUsers() {
              console.log('üîç Checking auth users and roles...');
              console.log('üì° Connecting to:', supabaseUrl);
              console.log('');
              
              try {
                  // Get all auth users
                  const { data, error } = await supabase.auth.admin.listUsers();
                  
                  if (error) {
                      console.error('‚ùå Error fetching users:', error.message);
                      process.exit(1);
                  }
                  
                  const users = data.users.map(user => ({
                      id: user.id,
                      email: user.email,
                      role: user.user_metadata?.role || 'GUEST',
                      name: user.user_metadata?.full_name || user.email,
                      email_confirmed: !!user.email_confirmed_at,
                      last_sign_in: user.last_sign_in_at,
                      created_at: user.created_at,
                      user_metadata: user.user_metadata
                  }));
                  
                  console.log(`üìä Found ${users.length} auth users:`);
                  console.log('');
                  
                  // Group users by role
                  const usersByRole = users.reduce((acc, user) => {
                      const role = user.role;
                      if (!acc[role]) acc[role] = [];
                      acc[role].push(user);
                      return acc;
                  }, {});
                  
                  // Display users grouped by role
                  Object.entries(usersByRole).forEach(([role, roleUsers]) => {
                      console.log(`üë• ${role} (${roleUsers.length} users):`);
                      roleUsers.forEach(user => {
                          const status = user.email_confirmed ? '‚úÖ' : '‚ö†Ô∏è';
                          const lastSignIn = user.last_sign_in 
                              ? new Date(user.last_sign_in).toLocaleDateString()
                              : 'Never';
                          console.log(`   ${status} ${user.name} (${user.email}) - Last sign in: ${lastSignIn}`);
                      });
                      console.log('');
                  });
                  
                  // Summary statistics
                  console.log('üìà Summary:');
                  console.log(`   Total users: ${users.length}`);
                  console.log(`   Confirmed emails: ${users.filter(u => u.email_confirmed).length}`);
                  console.log(`   Unconfirmed emails: ${users.filter(u => !u.email_confirmed).length}`);
                  console.log(`   Active roles: ${Object.keys(usersByRole).join(', ')}`);
                  
                  // Check for potential issues
                  console.log('');
                  console.log('üîç Health Checks:');
                  
                  const unconfirmedUsers = users.filter(u => !u.email_confirmed);
                  if (unconfirmedUsers.length > 0) {
                      console.log(`   ‚ö†Ô∏è  ${unconfirmedUsers.length} users with unconfirmed emails:`);
                      unconfirmedUsers.forEach(user => {
                          console.log(`      - ${user.email}`);
                      });
                  } else {
                      console.log('   ‚úÖ All users have confirmed emails');
                  }
                  
                  const usersWithoutRoles = users.filter(u => !u.user_metadata?.role);
                  if (usersWithoutRoles.length > 0) {
                      console.log(`   ‚ö†Ô∏è  ${usersWithoutRoles.length} users without explicit roles (defaulting to GUEST):`);
                      usersWithoutRoles.forEach(user => {
                          console.log(`      - ${user.email}`);
                      });
                  } else {
                      console.log('   ‚úÖ All users have explicit roles');
                  }
                  
                  console.log('');
                  console.log('‚úÖ Auth users check completed successfully!');
                  
              } catch (error) {
                  console.error('‚ùå Unexpected error:', error.message);
                  process.exit(1);
              }
          }

          checkAuthUsers();
          EOF

      - name: Run auth users check
        env:
          PROD_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          PROD_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PROD_SUPABASE_SERVICE_ROLE_KEY }}
        run: node check-auth-users.js

      - name: Cleanup
        if: always()
        run: rm -f check-auth-users.js
